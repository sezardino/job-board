generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("PRISMA_CONNECTION_STRING")
}

enum UserRoles {
  // admins
  ADMIN
  SUB_ADMIN
  // company
  OWNER
  MODERATOR
  RECRUITER
  // others
  CUSTOMER
}

enum CVFileStatus {
  ACTIVE
  ARCHIVED
}

enum JobContract {
  B2B
  PERMANENT
  MANDATE_CONTRACT
  SPECIFIC_TASK_CONTRACT
  INTERNSHIP
}

enum JobType {
  FULL_TIME
  PART_TIME
  PRACTICE_INTERNSHIP
  FREELANCE
}

enum JobOperatingMode {
  REMOTE
  OFFICE
  HYBRID
  OTHER
}

enum EntityStatus {
  ACTIVE
  INACTIVE
  CREATED
}

enum CompanyStatus {
  CREATED
  ACTIVE
  INACTIVE
  BLOCKED
}

enum UserStatus {
  ACTIVE
  BLOCKED
  INACTIVE
}

enum JobOfferStatus {
  ARCHIVED
  FINISHED
  ACTIVE
  INACTIVE
  DRAFT
}

enum JobAplicationStatus {
  PROCESSED
  OPENED
  REJECTED
}

enum JobAplicationRecruitmentStatus {
  PROCESSED
  SCREENING
  INTERVIEW
  PRE_OFFER
  OFFER
  REJECTED
}

enum Seniority {
  INTERN
  JUNIOR
  MID
  SENIOR
  EXPERT
}

enum SkillLevel {
  NICE_TO_HAVE
  BASIC
  MEDIUM
  ADVANCED
  EXPERT
}

type Skill {
  name  String
  level SkillLevel
}

type Salary {
  from Int
  to   Int
}

type Location {
  country  String
  city     String
  street   String
  building String
  zipCode  String
}

model User {
  id     String     @id @default(auto()) @map("_id") @db.ObjectId
  role   UserRoles  @default(CUSTOMER)
  status UserStatus @default(ACTIVE)

  name   String @default("")
  avatar Image?

  isAcceptInvite Boolean @default(false) @map("is_accept_invite")
  inviteToken    String? @map("invite_token")

  email         String  @unique
  emailToken    String? @map("email_token")
  emailVerified Boolean @default(false) @map("email_verified")

  password String @default("")

  company   Company? @relation(name: "member", fields: [companyId], references: [id])
  companyId String?  @map("company_id") @db.ObjectId

  applications JobApplication[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Industry {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name       String       @unique
  status     EntityStatus @default(CREATED)
  categories Category[]

  offers JobOffer[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Category {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name   String       @unique
  status EntityStatus @default(CREATED)

  industry   Industry @relation(fields: [industryId], references: [id])
  industryId String   @map("industry_id") @db.ObjectId

  createdAt DateTime   @default(now()) @map("created_at")
  offers    JobOffer[]
}

model Company {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  status CompanyStatus @default(CREATED)

  // needed while registration
  logo     Image?
  location Location[]
  // not editable fields
  name     String     @unique
  slug     String     @unique

  // TODO: add in next version (gallery)
  // gallery Image[] @relation(name: "gallery")

  // TODO: add in next version (thumbnail)
  // thumbnail   Image?  @relation(name: "thumbnail", fields: [thumbnailId], references: [id])
  // thumbnailId String? @unique @map("thumbnail_id") @db.ObjectId

  // needed for profile
  slogan String? @map("slogan")
  bio    String?

  members User[]     @relation(name: "member")
  offers  JobOffer[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model JobOffer {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name      String
  status    JobOfferStatus     @default(DRAFT)
  salary    Salary?
  type      JobType
  contract  JobContract[]
  operating JobOperatingMode[]
  seniority Seniority
  skills    Skill[]
  // TODO: add in next version (location)
  // location  Location[]

  description String @default("")

  company   Company @relation(fields: [companyId], references: [id])
  companyId String  @map("company_id") @db.ObjectId

  industry   Industry @relation(fields: [industryId], references: [id])
  industryId String   @map("industry_id") @db.ObjectId

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String   @map("category_id") @db.ObjectId

  publishedAt DateTime? @map("published_at")
  // TODO: add in next version (deadline)
  // deadlineAt  DateTime? @map("deadline_at")

  applications JobApplication[]

  createdAt DateTime @default(now()) @map("created_at")
}

type JobApplicationNote {
  content   String
  createdAt DateTime @default(now()) @map("created_at")
}

model JobApplication {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  status            JobAplicationStatus            @default(PROCESSED)
  recruitmentStatus JobAplicationRecruitmentStatus @default(PROCESSED) @map("rectuitment_status")

  notes JobApplicationNote[]

  name              String
  email             String
  phone             String
  message           String
  futureRecruitment Boolean @map("future_recturation")
  dataProcessing    Boolean @map("data_processing")

  jobOffer   JobOffer @relation(fields: [jobOfferId], references: [id])
  jobOfferId String   @map("job_offer_id") @db.ObjectId

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @map("user_id") @db.ObjectId

  // optional for seeds
  curriculumVitae   CurriculumVitae @relation(fields: [curriculumVitaeId], references: [id])
  curriculumVitaeId String          @map("cv_id") @db.ObjectId

  createdAt DateTime @default(now()) @map("created_at")
}

model Image {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // TODO: add in next version
  // thumbnail   Company? @relation(name: "thumbnail")
  // thumbnailId String?  @unique @map("thumbnail_id") @db.ObjectId

  // TODO: add in next version
  // gallery   Company? @relation(name: "gallery", fields: [galleryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  // galleryId String?  @map("gallery_id") @db.ObjectId

  company   Company? @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  companyId String?  @unique @db.ObjectId

  name String
  url  String

  user   User?   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId String? @unique @db.ObjectId

  createdAt DateTime @default(now()) @map("created_at")
}

model CurriculumVitae {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name String
  url  String

  status CVFileStatus @default(ACTIVE)

  applications JobApplication[]

  createdAt DateTime @default(now()) @map("created_at")
}
